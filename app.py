# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E38UDeEps5lm4Ddm2JRyHQKwunaQaiK0
"""
import streamlit as st
import openai
from fpdf import FPDF
import time

# --- Configuration ---
try:
    api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("OpenAI API key not found in Streamlit secrets.")
    st.stop()

client = openai.OpenAI(api_key=api_key)

# --- Session State Initialization ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [{
        "role": "system", 
        "content": """You are a professional resume assistant. Ask one question at a time to collect:
        1. Full name, contact info
        2. Professional summary
        3. Work experience (company, role, duration, achievements)
        4. Education
        5. Skills
        When you have all information, say 'RESUME READY' exactly."""
    }]
if "resume_ready" not in st.session_state:
    st.session_state.resume_ready = False

# --- UI Setup ---
st.set_page_config(page_title="Resume Builder", layout="centered")
st.title("ðŸ“„ Smart Resume Builder")

# --- Chat Interface ---
if not st.session_state.resume_ready:
    # Display chat history
    for msg in st.session_state.chat_history[1:]:
        role = "ðŸ¤– Assistant" if msg["role"] == "assistant" else "ðŸ§‘ You"
        st.markdown(f"**{role}:** {msg['content']}")

    # Generate next question if needed
    if st.session_state.chat_history[-1]["role"] != "assistant":
        with st.spinner("Preparing your next question..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=st.session_state.chat_history
                )
                reply = response.choices[0].message.content
                st.session_state.chat_history.append({"role": "assistant", "content": reply})
                
                if "RESUME READY" in reply:
                    st.session_state.resume_ready = True
                
                st.rerun()
            except Exception as e:
                st.error(f"Error generating question: {e}")
                st.stop()

    # User input
    user_input = st.text_input(
        "Your answer:", 
        key=f"input_{len(st.session_state.chat_history)}",
        value=""
    )

    if st.button("Send", use_container_width=True) and user_input.strip():
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        st.rerun()

# --- Resume Generation ---
else:
    st.subheader("Your Professional Resume")
    
    with st.spinner("Generating your resume..."):
        try:
            # Generate markdown resume
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.chat_history + [{
                    "role": "user",
                    "content": """Generate a professional resume in markdown format with these sections:
                    1. Header with name and contact info
                    2. Professional Summary
                    3. Work Experience (with bullet points)
                    4. Education
                    5. Skills
                    Use proper markdown formatting."""
                }]
            )
            resume_md = response.choices[0].message.content
            st.markdown(resume_md)
            
            # Generate PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            
            # Convert markdown to plain text
            text_content = []
            for line in resume_md.split('\n'):
                clean_line = line.replace('*', '').replace('#', '').strip()
                if clean_line:
                    text_content.append(clean_line)
            
            # Add to PDF
            for line in text_content:
                pdf.multi_cell(0, 10, txt=line)
                pdf.ln(5)
            
            # Save PDF to bytes
            pdf_output = pdf.output(dest='S')
            pdf_bytes = bytes(pdf_output)
            
            # Download button
            st.download_button(
                label="ðŸ“¥ Download as PDF",
                data=pdf_bytes,
                file_name="professional_resume.pdf",
                mime="application/pdf",
                use_container_width=True
            )
            
        except Exception as e:
            st.error(f"Error generating resume: {str(e)}")
    
    if st.button("ðŸ”„ Start Over", use_container_width=True):
        st.session_state.clear()
        st.rerun()
