# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E38UDeEps5lm4Ddm2JRyHQKwunaQaiK0
"""
import streamlit as st
import openai
from fpdf import FPDF

# --- Configuration ---
try:
    api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("OpenAI API key not found in Streamlit secrets.")
    st.stop()

client = openai.OpenAI(api_key=api_key)

# --- Session State Initialization ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [{
        "role": "system", 
        "content": "You are a resume assistant. Ask one question at a time to build a resume."
    }]
if "resume_ready" not in st.session_state:
    st.session_state.resume_ready = False
if "last_assistant_message" not in st.session_state:
    st.session_state.last_assistant_message = ""

# --- UI Setup ---
st.set_page_config(page_title="Resume Builder", layout="centered")
st.title("ðŸ“„ Smart Resume Builder")
st.write("Hello! I'll help you create a professional resume.")

# --- Chat Display ---
if not st.session_state.resume_ready:
    # Show chat history (skip system message)
    for msg in st.session_state.chat_history[1:]:
        role = "ðŸ¤– Assistant" if msg["role"] == "assistant" else "ðŸ§‘ You"
        st.markdown(f"**{role}:** {msg['content']}")

    # Initial assistant message
    if len(st.session_state.chat_history) == 1:
        with st.spinner("Thinking..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=st.session_state.chat_history
                )
                first_question = response.choices[0].message.content
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": first_question
                })
                st.session_state.last_assistant_message = first_question
                st.rerun()
            except Exception as e:
                st.error(f"Error: {e}")
                st.stop()

    # Input box - always starts empty for new questions
    user_input = st.text_input(
        "Your answer:",
        key=f"input_{len(st.session_state.chat_history)}",  # Unique key per question
        value=""
    )

    if st.button("Send", use_container_width=True) and user_input.strip():
        # Add user response
        st.session_state.chat_history.append({
            "role": "user", 
            "content": user_input
        })
        
        with st.spinner("Thinking..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=st.session_state.chat_history
                )
                assistant_reply = response.choices[0].message.content
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": assistant_reply
                })
                
                if "resume is ready" in assistant_reply.lower():
                    st.session_state.resume_ready = True
                
                st.rerun()  # This clears the input
                
            except Exception as e:
                st.error(f"Error: {e}")

# --- Resume Generation ---
else:
    st.subheader("Your Resume")
    with st.spinner("Generating..."):
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.chat_history + [{
                    "role": "user",
                    "content": "Generate my resume in markdown format"
                }]
            )
            resume = response.choices[0].message.content
            st.markdown(resume)
            
            # PDF Generation
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            for line in resume.replace('*', '').split('\n'):
                if line.strip():
                    pdf.multi_cell(0, 10, line.strip())
            st.download_button(
                "ðŸ“¥ Download PDF",
                pdf.output(dest='S').encode('latin1'),
                "resume.pdf",
                "application/pdf",
                use_container_width=True
            )
            
        except Exception as e:
            st.error(f"Error: {e}")
    
    if st.button("ðŸ”„ Start Over", use_container_width=True):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()
