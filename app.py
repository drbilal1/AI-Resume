# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E38UDeEps5lm4Ddm2JRyHQKwunaQaiK0
"""

import streamlit as st
import openai

#Load OpenAI API key from secrets
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Initialize session state
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [{"role": "system", "content": "You are a resume assistant. Ask the user questions to collect resume details one at a time."}]
if "resume_ready" not in st.session_state:
    st.session_state.resume_ready = False
if "user_input" not in st.session_state:
    st.session_state.user_input = ""

st.title("📄 Smart Resume Builder")

# Chat loop
if not st.session_state.resume_ready:
    # Display chat history
    for msg in st.session_state.chat_history[1:]:
        if msg["role"] == "assistant":
            st.markdown(f"**🤖 Assistant:** {msg['content']}")
        elif msg["role"] == "user":
            st.markdown(f"**🧑 You:** {msg['content']}")

    # Input from user
    user_input = st.text_input("Your answer:", key="user_input")

    if st.button("Send"):
        if user_input.strip() != "":
            # Append user response
            st.session_state.chat_history.append({"role": "user", "content": user_input})

            # Send to OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.chat_history
            )
            assistant_message = response["choices"][0]["message"]["content"]

            # Add assistant reply
            st.session_state.chat_history.append({"role": "assistant", "content": assistant_message})

            # If assistant says resume is ready, trigger generation
            if "resume is ready" in assistant_message.lower() or "generating your resume" in assistant_message.lower():
                st.session_state.resume_ready = True

            st.experimental_rerun()

else:
    # Generate resume from previous chat
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=st.session_state.chat_history + [{"role": "user", "content": "Now generate a full professional resume in markdown format."}]
    )
    resume_md = response["choices"][0]["message"]["content"]
    st.markdown("## 📝 Your Generated Resume")
    st.markdown(resume_md)

    # Optionally allow download
    st.download_button("📥 Download as .txt", resume_md, file_name="resume.txt")

    if st.button("🔄 Start Over"):
        for key in ["chat_history", "resume_ready", "user_input"]:
            del st.session_state[key]
        st.experimental_rerun()
