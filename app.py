# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E38UDeEps5lm4Ddm2JRyHQKwunaQaiK0
"""
import streamlit as st
import openai
from fpdf import FPDF  # For PDF generation

# --- Configuration ---
try:
    api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("OpenAI API key not found in Streamlit secrets. Please add it to your app's secrets.")
    st.stop()

client = openai.OpenAI(api_key=api_key)

# --- Session State Initialization ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [{"role": "system", "content": "You are a friendly and professional resume assistant. Your goal is to collect all necessary information from the user to build a comprehensive resume. Ask clear, concise questions one at a time. Once you have enough information, indicate that the resume is ready to be generated."}]
if "resume_ready" not in st.session_state:
    st.session_state.resume_ready = False
if "user_input" not in st.session_state:
    st.session_state.user_input = ""
if "last_assistant_message" not in st.session_state:
    st.session_state.last_assistant_message = ""

# --- Streamlit UI ---
st.set_page_config(page_title="Smart Resume Builder", layout="centered")
st.title("üìÑ Smart Resume Builder")
st.write("Hello! I'm your AI resume assistant. I'll ask you a series of questions to gather information and then generate a professional resume for you.")

# --- Chat Loop ---
if not st.session_state.resume_ready:
    for msg in st.session_state.chat_history[1:]:
        if msg["role"] == "assistant":
            st.markdown(f"**ü§ñ Assistant:** {msg['content']}")
        elif msg["role"] == "user":
            st.markdown(f"**üßë You:** {msg['content']}")

    if len(st.session_state.chat_history) == 1 and not st.session_state.last_assistant_message:
        with st.spinner("Thinking..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=st.session_state.chat_history
                )
                initial_assistant_message = response.choices[0].message.content
                st.session_state.chat_history.append({"role": "assistant", "content": initial_assistant_message})
                st.session_state.last_assistant_message = initial_assistant_message 
                st.rerun()
            except openai.APIError as e:
                st.error(f"Error communicating with OpenAI: {e}")
                st.stop()

    # Input from user - modified to maintain text after pressing Enter
    user_input = st.text_input(
        "Your answer:", 
        value=st.session_state.user_input, 
        key="user_input_widget",
        on_change=lambda: None  # Prevents clearing on Enter
    )

    # Send button logic
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("Send", use_container_width=True):
            if user_input.strip() != "":
                st.session_state.last_assistant_message = ""
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                
                with st.spinner("AI is thinking..."):
                    try:
                        response = client.chat.completions.create(
                            model="gpt-3.5-turbo",
                            messages=st.session_state.chat_history
                        )
                        assistant_message = response.choices[0].message.content
                        st.session_state.chat_history.append({"role": "assistant", "content": assistant_message})
                        st.session_state.last_assistant_message = assistant_message

                        if "resume is ready" in assistant_message.lower() or \
                           "generating your resume" in assistant_message.lower() or \
                           "i have enough information" in assistant_message.lower():
                            st.session_state.resume_ready = True
                            
                        # Clear input only after successful processing
                        st.session_state.user_input = ""
                    
                    except openai.APIError as e:
                        st.error(f"Error communicating with OpenAI: {e}")
                
                st.rerun()

    with col2:
        if st.button("Clear Input", use_container_width=True):
            st.session_state.user_input = ""
            st.rerun()

# --- Resume Generation and Display ---
else:
    st.subheader("## üìù Your Generated Resume")
    with st.spinner("Generating your professional resume..."):
        try:
            final_resume_prompt = "Based on our conversation, please generate a full, professional resume in markdown format. Include sections like Contact Information, Summary/Objective, Work Experience, Education, Skills, and any other relevant sections we discussed. Format it clearly and professionally."
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.chat_history + [{"role": "user", "content": final_resume_prompt}]
            )
            resume_md = response.choices[0].message.content
            st.markdown(resume_md)

            # Generate PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            
            # Convert markdown to plain text for PDF (simple approach)
            resume_text = resume_md.replace('#', '').replace('*', '').replace('_', '')
            
            for line in resume_text.split('\n'):
                pdf.cell(200, 10, txt=line, ln=True)
            
            pdf_bytes = pdf.output(dest='S').encode('latin1')

            st.download_button(
                label="üì• Download as PDF",
                data=pdf_bytes,
                file_name="resume.pdf",
                mime="application/pdf",
                use_container_width=True
            )

        except openai.APIError as e:
            st.error(f"Error generating resume with OpenAI: {e}")
    
    if st.button("üîÑ Start Over", use_container_width=True):
        for key in ["chat_history", "resume_ready", "user_input", "last_assistant_message"]:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()
